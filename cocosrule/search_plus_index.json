{"./":{"url":"./","title":"Introduction","keywords":"","body":"规范简介 「规范」主要是配合公司各个部门行为趋于标准化，提高工作效率，提升团队协作能力，使项目在既定的日期内准时交付。 "},"chapter01/DESIGN.html":{"url":"chapter01/DESIGN.html","title":"设计规范","keywords":"","body":"设计规则 一、设计适配 一、设计适配 一、设计适配 "},"chapter01/CLIENTCOCOS.html":{"url":"chapter01/CLIENTCOCOS.html","title":"前端规范-cocos","keywords":"","body":"cocos前端规范 一、命名规范 1、所有的组建命名都要把组建前缀加上，如脚本上有引用，名字必须一致。 【精灵】spr_xxx 、【文字】lab_xxx、【富文本】rich_xxx、【粒子特效】par_xxx、【按钮】btn_xxx、【滚动视图】scroll_xxx、【布局】layout_xxx、【滑动器】slider_xxx、【页面视图】page_xxx、【输入框】edit_xxx、【地图】tmap_xxx、【地图块】ttile_xxx、【进度条】pro_xxx、【复选按钮】toggle_xxx、【播放器】video_xxx、【网页视图】web_xxx等。 2、文件夹命名首字母大写，后面驼峰式。 3、类文件命名首字母大写，后面驼峰式。 4、函数名首字母小写，后面驼峰式。 5、拒绝不常用的英文命名，可用拼音替代。 6、逻辑代码变量命名要有含义，不要a、b、c。 二、编码规范 1、新函数首行必须写 var self = this，防止闭包引用。 2、单个类文件不得超过300行，单个函数不得超过50行。 3、函数上方必须加注释，关键算法前要加注释。 4、重复使用的代码必须封装成函数。 5、重复引用的变量，提前声明。如var a = b.parent.parent.parent。 6、保证代码整洁，函数之间空一行，多余空行要删除。 7、从旧项目复制过来的无用代码，要删除。 8、注册事件监听时要在节点销毁时取消监听。 9、声明变量的时候要定义类型、private和public要分清。 10、验证通过的log，及时清理。 11、要有勇气重构自己的代码。 12、游戏要加版本号，方便查看是否热更新成功。 13、按钮连点要处理，发消息时要增加模态层。 14、Label体验问题，越界处理、居中还是左对齐参考效果图，label字体尽量使用字体库增加美感。 三、资源规范 1、打包图集时，共用资源放到同一文件夹内，其余资源按照类别或场景整合到各自文件夹，打包TexturePacker时要保留原始.tps项目，方便换图重新生成图集。 2、音频资源、字体库资源、动作资源、spine资源要有对应的文件夹。 3、拖拽UI时，层级不要太深，注意父子关系和相对布局widget。 4、使用pngyu压缩图片。 四、合作规范 1、立项会议后，UI开工前要和设计师确定项目设计分辨率，默认1334x750，背景图1700x750。 2、遇到难题时，自己先尝试解决，半小时内没有结果，及时找人帮忙。 3、必须按照效果图开发，细节到每个字的大小和颜色。 4、如需求文档和效果图不符，及时找负责人反馈。 5、服务器如果返回数据有问题，前端必须有tip提示。 6、如服务器为及时提供接口，自己要先伪造服务器数据。具体结构可以和服务器商榷。 7、同他人合作时，端正工作态度，拒绝严厉言辞。 8、接口有争议时，及时找自己负责人协调。 9、测试阶段，如有自己的bug，把责任人指向自己，解决了bug，自己要复测一遍。 10、git操作时，先git status一下检查一下修改的文件是否有误操作，也可以通过VScode查看，如没有问题，依次执行git add xxxxx/git commit -m \"修改描述写清楚\"/git pull【需要再次查看是否有冲突，有的话，手动解决冲突，重新git add xxx、git commit -m \"\"、git pull】/git push。 11、增加真机测试量量，杜绝⻚面突然卡死等现象。 五、惩罚机制 1、违反以上任意一条，并给项目带来不良影响，罚款10元。 "},"chapter01/CLIENT.html":{"url":"chapter01/CLIENT.html","title":"前端规范-flutter","keywords":"","body":"客户端要求 1、完全根据【客户端标准化编码规范】执⾏。(100 RMB) 2、加强游戏特效处理理，保证流畅度。(100 RMB) 3、增加真机测试量量，杜绝⻚面突然卡死等现象。(100 RMB) 4、要对服务器错误回执处理理。(100 RMB) 5、编写测试⽤例⽂档，如注册时填写错误验证码，检验服务器回值。(50RMB) 6、禁止直接拷贝项目。(200RMB) "},"chapter01/SERVER.html":{"url":"chapter01/SERVER.html","title":"后端规范","keywords":"","body":"服务器端要求 1、增加游戏随机测试⽤用例例。在⽆无法保证程序准确性的情况下，必须配套随机测试⽤用 例例，以减少游戏后期上线bug量量。(100 RMB) 2、为客户端提供服务器器接⼝口⽂文档(建议放到git仓库)。⽅方便便客户端与服务器器有效沟 通，书写接⼝口⽂文档，包括接⼝口功能、接⼝口名称、携带参数。(100 RMB) 3、当有需求变更更时，不不予修改。需求⽂文档上不不存在的功能点，不不论⼤大⼩小，⼀一律律属于新 需求，【项⽬目组】处理理完新增需求对接以后(客户加钱、时间)，才可以修改。(200 RMB) "},"chapter01/TEST.html":{"url":"chapter01/TEST.html","title":"测试规范","keywords":"","body":"黑盒测试标准 一、第一版测试 1、按照需求文档或者原型图进行严格测试，跟项目组确认标准。 2、测试的时候，区分好，哪些是优化，哪些是bug，根据问题严重行标注优先级。 3、不确定是否是问题，独立跟技术进行沟通。 4、有自己的想法，完成整个流程。 5、分享，文案，不准出现其他项目的信息和logo。 6、描述测试bug的时候，尽量具体一些。 7、你遇到什么问题，就写什么问题，就这么简单，不要考虑其他的。 8、再测试上，遇到大家都有问题，也可以写。 9、复卖项目项目的通病找出来，针对性反馈。 二、复测 1、验收已经修改好的问题。 2、深度测试，对有重大影响的数据反复进行测试。 3、对于余额有影响的部分，根据一定算法，上传数据，进行测试。 4、前台后台关联测试，要知道后台每个板块的作用以及在app中的影响。 三、验收给客户 1、对于验收的问题都看一次。 2、用自己的逻辑去测试，不要做测试者，做使用者。 3、后台使用要站在客户那边去验收，在功能好用的前提下反馈优化，比如增加搜索，分页等功能。 四、技能提升 1、我们不仅仅是一个测试人员，更要做一个使用者。 2、不断的提高自己的逻辑思维。 3、独立沟通解决问题。 "}}